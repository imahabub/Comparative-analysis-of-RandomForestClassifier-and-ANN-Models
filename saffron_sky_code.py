# -*- coding: utf-8 -*-
"""saffron_sky_code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QZtMbS2WL0659xEiv-mg2-vgrP6j-LJc

Importing the required python libraries
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as plotx

"""Importing the ailine dataset into google colab"""

saffron_df= pd.read_csv("/content/UK_NATIONAL_AIRLINES_DATA_CW1 (S) (1).csv", encoding="latin-1")
saffron_df.head(6)

"""Information about the dataset"""

saffron_df.info()

"""Evaluating the null values in the dataset"""

saffron_df.isnull().sum()

"""Determining the duplicate values in the dataset"""

saffron_df.duplicated().any()

"""Removing the null values"""

saffron_df.dropna(inplace=True)

"""Computing the descriptive statistics"""

saffron_df.describe()

"""Ploting the relevant variables of the dataset

Count of Inflight wifi service Ratings based on satisfaction
"""

plot_inflight=sns.countplot(x ='Inflight wifi service', hue= 'Satisfied',data = saffron_df, palette='Blues')
for label in plot_inflight.containers:
    plot_inflight.bar_label(label)
plt.title('Count of Inflight wifi service Ratings based on satisfaction')
plt.xlabel('Inflight wifi service Rating')
plt.ylabel('Count')
plt.legend(title='Satisfied')
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

"""Determining Satisfaction level by Continent"""

plot_conti = plotx.histogram(saffron_df, x='Continent', color='Satisfied', barmode='group',
                   title='Determining Satisfaction level by Continent',
                   labels={'Continent level': 'Continent', 'count of passengers': 'Number of Passengers'})
plot_conti.update_layout(xaxis_title='Continent level', yaxis_title='Count of passengers', bargap=0.3)
plot_conti.show()



"""Count of age band based on satisfaction"""

plot_age=sns.countplot(x ='Age Band', hue= 'Satisfied',data = saffron_df, palette='husl')
for label in plot_age.containers:
    plot_age.bar_label(label)
plt.title('Count of age band based on satisfaction')
plt.xlabel('Age band')
plt.ylabel('Count')
plt.legend(title='Satisfied')
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()



"""Count the type of travel based on satisfaction"""

plot_type=sns.countplot(x ='Type of Travel', hue= 'Satisfied',data = saffron_df, palette='coolwarm')
for label in plot_type.containers:
    plot_type.bar_label(label)
plt.title('Count of type of travel based on satisfaction')
plt.xlabel('Type of travel')
plt.ylabel('Count')
plt.legend(title='Satisfied')
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

"""Data preprocessing"""

from sklearn.preprocessing import StandardScaler, LabelEncoder
label_encoder_international_dataset = {}
categorical_column_international = ['Gender', 'Satisfied', 'Age Band', 'Type of Travel', 'Class', 'Destination', 'Continent']
for column in categorical_column_international:
    label_encoder_internation= LabelEncoder()
    saffron_df[column] = label_encoder_internation.fit_transform(saffron_df[column])
    label_encoder_international_dataset[column] = label_encoder_internation

"""Heatmap generation"""

plt.figure(figsize=(8, 8))
sns.heatmap(saffron_df.corr(), annot=True, cmap='Blues')
plt.show()

"""Spliting the dataset and fitting the machine learning model"""

from sklearn.model_selection import train_test_split

X_international = saffron_df.drop(['Ref', 'id', 'Satisfied', 'Age'], axis=1)
y_international = saffron_df['Satisfied']
X_train, X_test, y_train, y_test = train_test_split(X_international, y_international, test_size=0.3, random_state=42)

"""RandomForestClassifier Model"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, log_loss
from sklearn.model_selection import train_test_split

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

confusion_matrix_rf = confusion_matrix(y_test, y_pred_rf)
accuracy_rf = accuracy_score(y_test, y_pred_rf)
class_report_rf = classification_report(y_test, y_pred_rf)

plt.figure(figsize=(5, 4))
sns.heatmap(confusion_matrix_rf, annot=True, fmt='g', cmap='inferno')
plt.title('Confusion Matrix of Random Forest model')
plt.xlabel('Predicted values', fontsize=10)
plt.ylabel('Actual values', fontsize=10)
plt.show()

print(f'Accuracy of Random Forest model: {accuracy_rf:.3f}')
print(class_report_rf)

y_pred_rf_proba = rf_model.predict_proba(X_test)[:, 1]
loss_rf = log_loss(y_test, y_pred_rf_proba)
print(f'Log Loss value for Random Forest: {loss_rf:.3f}')

"""ANN Model"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
ann_model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

ann_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
ann_model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2, verbose=1)

y_pred_ann = ann_model.predict(X_test)
y_pred_ann = (y_pred_ann > 0.5).astype("int32")

from sklearn.metrics import confusion_matrix
confusion_matrix_ann = confusion_matrix(y_test, y_pred_ann)
plt.figure(figsize=(5, 4))
sns.heatmap(confusion_matrix_ann, annot=True, fmt='g', cmap='viridis')
plt.title('Confusion Matrix of ANN model')
plt.xlabel('Predicted values', fontsize=10)
plt.ylabel('Actual values', fontsize=10)
plt.show()

accuracy_ann = accuracy_score(y_test, y_pred_ann)
print(f'Accuracy of ANN model: {accuracy_ann:.3f}')

print(classification_report(y_test, y_pred_ann))

loss_ann= log_loss(y_test, y_pred_ann)
print(f'Log Loss value for ANN: {loss_ann:.3f}')